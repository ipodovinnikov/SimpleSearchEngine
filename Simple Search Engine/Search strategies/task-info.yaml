type: edu
custom_name: stage6
files:
- name: src/search/Main.java
  visible: true
  text: |
    package search;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/SearchEngineTests.java
  visible: false
  text: |
    public class SearchEngineTests {
        public static final String NAMES = "Kristofer Galley\n" +
            "Fernando Marbury fernando_marbury@gmail.com\n" +
            "Kristyn Nix nix-kris@gmail.com\n" +
            "Regenia Enderle\n" +
            "Malena Gray\n" +
            "Colette Mattei\n" +
            "Wendolyn Mcphillips\n" +
            "Jim Gray\n" +
            "Coreen Beckham\n" +
            "Bob Yeh bobyeah@gmail.com\n" +
            "Shannan Bob stropeshah@gmail.com\n" +
            "Yer Fillion\n" +
            "Margene Resendez marres@gmail.com\n" +
            "Blossom Ambler\n" +
            "Teri Ledet teri_ledet@gmail.com\n" +
            "Dana Baron baron@gmail.com\n" +
            "Abram Goldsberry\n" +
            "Yer Leopold\n" +
            "Stefania Trunzo\n" +
            "Alexis Leopold\n" +
            "Carlene Bob\n" +
            "Oliver Dacruz\n" +
            "Jonie Richter\n" +
            "Pasquale Gallien gallien@evilcorp.com\n" +
            "Verdie Gentle\n" +
            "Gerardo Strouth gallien@evilcorp.com\n" +
            "Agripina Bob\n" +
            "Latricia Niebuhr\n" +
            "Malena Schommer\n" +
            "Drema Leopold\n" +
            "Heide Payeur\n" +
            "Ranae Digiovanni\n" +
            "Simona Pereira\n" +
            "Nick Digiovanni\n" +
            "Angelita Wigington gallien@evilcorp.com\n" +
            "Elin Gray\n" +
            "Dwain Trunzo\n" +
            "Boris Beiler\n" +
            "Remi Malek fsociefy@gmail.com\n" +
            "Demetria Hostetler gallien@evilcorp.com\n" +
            "Nydia Mcduffie\n" +
            "Florencio Defibaugh\n" +
            "Warner Giblin\n" +
            "Bob Mans\n" +
            "Shu Gray\n" +
            "Kaycee Gray\n" +
            "Victorina Froehlich victory@gmail.com\n" +
            "Roseanne Gray\n" +
            "Erica Radford hisam@gmail.com\n" +
            "Elyse Pauling";
    }
  learner_created: false
- name: test/SimpleSearchEngineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.*;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class SimpleSearchEngineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>().setAttach(
                    new TestClue("1\n" +
                    "ANY\n" +
                    "bob gallien@evilcorp.com\n" +
                    "2\n" +
                    "1\n" +
                    "NONE\n" +
                    "bob gallien@evilcorp.com\n" +
                    "0")).setInput("1\n" +
                    "ANY\n" +
                    "bob gallien@evilcorp.com\n" +
                    "2\n" +
                    "1\n" +
                    "NONE\n" +
                    "bob gallien@evilcorp.com\n" +
                    "0")
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES),


                new TestCase<TestClue>().setAttach(new TestClue("2\n" +
                    "1\n" +
                    "ALL\n" +
                    "this text never gonna be matched\n" +
                    "2\n" +
                    "0")).setInput("2\n" +
                    "1\n" +
                    "ALL\n" +
                    "this text never gonna be matched\n" +
                    "2\n" +
                    "0")
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES)
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String cR = "\n";
            List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
            String[] inputLines = clue.input.split(cR);
            String[] reference;

            reference = SearchEngineTests.NAMES.split("\n");

            //clear the list of unnecessary lines, if any
            List<String> cleanedOutput = new ArrayList<String>();
            for (int i = 0; i < outputLines.size(); i++) {
                if (containsItemFromList(outputLines.get(i), reference)) {
                    cleanedOutput.add(outputLines.get(i).toLowerCase());
                }
            }

            int currentInputLine = 0;
            int currentOutputLine = 0;

            int actionType = -1;

            while (actionType != 0) {
                try {
                    actionType = Integer.parseInt(inputLines[currentInputLine]);
                } catch (NumberFormatException e) {
                    return new CheckResult(false,
                        "The number of menu item must be number!");
                }

                switch (actionType) {
                    case 1:
                        currentInputLine++;

                        List<Integer> result = new ArrayList<>();

                        List<String> intendedResult = new ArrayList<>();

                        while (true) {
                            String mode = inputLines[currentInputLine].trim().toLowerCase();
                            currentInputLine++;

                            String toSearch = "";

                            if (mode.equalsIgnoreCase("all")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = true;

                                    for (String currCheck : allChecks) {
                                        if (!(s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck))) {

                                            isPassedChecks = false;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            } else if (mode.equalsIgnoreCase("any")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = false;

                                    for (String currCheck : allChecks) {
                                        if (s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck)) {

                                            isPassedChecks = true;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            } else if (mode.equalsIgnoreCase("none")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = true;

                                    for (String currCheck : allChecks) {
                                        if (s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck)) {

                                            isPassedChecks = false;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            }
                        }

                        String[] userResult = new String[intendedResult.size()];
                        for (int i = 0; i < intendedResult.size(); i++) {
                            try {
                                userResult[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutput = intendedResult.toArray(String[]::new);

                        Arrays.sort(correctOutput);
                        Arrays.sort(userResult);

                        if (!Arrays.equals(correctOutput, userResult)) {
                            return new CheckResult(false,
                                "Search result is not equal " +
                                    "to the expected search");
                        }
                        break;
                    case 2:
                        currentInputLine++;

                        List<String> intendedResultAll = new ArrayList<>();

                        for (String s : reference) {
                            s = s.toLowerCase();
                            intendedResultAll.add(s);
                        }

                        String[] userResultAll = new String[intendedResultAll.size()];
                        for (int i = 0; i < intendedResultAll.size(); i++) {
                            try {
                                userResultAll[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutputAll = intendedResultAll.toArray(String[]::new);

                        Arrays.sort(correctOutputAll);
                        Arrays.sort(userResultAll);

                        if (!Arrays.equals(correctOutputAll, userResultAll)) {
                            return new CheckResult(false,
                                "Looks like you're printing " +
                                    "unknown people when you enter option 2.");
                        }
                        break;
                    case 0:
                        return CheckResult.correct();
                    default:
                        currentInputLine++;
                        break;
                }
            }

            return CheckResult.correct();
        }

        private static boolean containsItemFromList(String inputStr, String[] items) {
            return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
        }
    }
  learner_created: false
- name: src/search/MenuDispatcher.java
  visible: true
  text: |
    package search;

    import java.util.List;
    import java.util.Map;

    public class MenuDispatcher {

        /**
         * Created by ipodovinnikov (podovinnii@ae.com) on 4/1/22.
         */

        public int dispatch(String selectedOperation, Map<String, List<Integer>> revertedIndexMap, SearchEngine searchEngine) {

            switch (selectedOperation) {
                case "1":
                    searchEngine.search(revertedIndexMap);
                    return 0;
                case "2":
                    searchEngine.printAll();
                    return 0;
                case "0":
                    System.out.println("Bye!\n1");
                    return 1;
                default:
                    System.out.println("Incorrect option! Try again.");
            }
            return 0;
        }
    }
  learner_created: true
- name: src/search/Person.java
  visible: true
  text: |
    package search;

    public class Person {

        public Person(String name, String email) {
            this.name = name;
            this.email = email;
        }

        /**
         * Created by ipodovinnikov (podovinnii@ae.com) on 4/1/22.
         */

        private String name;
        private String email;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        @Override
        public String toString() {
            return name + " " + email;
        }
    }
  learner_created: true
- name: src/search/SearchEngine.java
  visible: true
  text: |
    package search;

    import java.io.BufferedReader;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.*;
    import java.util.concurrent.CopyOnWriteArrayList;

    import static search.Helper.Reader.read;

    public class SearchEngine {

        /**
         * Created by ipodovinnikov (podovinnii@ae.com) on 4/1/22.
         */

        private List<String> list = new ArrayList<>();

        public void search(Map<String, List<Integer>> invertedIndexMap) {
            System.out.println("Enter a name or email to search all suitable people.");
            String query = read().toLowerCase();

            if (invertedIndexMap.get(query) != null) {
                System.out.printf("%d persons found:\n", invertedIndexMap.get(query).size());
                for (int k = 0; k < invertedIndexMap.get(query).size(); k++) {
                    System.out.println(list.get(invertedIndexMap.get(query).get(k)));
                }
            } else {
                System.out.println("No matching people found.");
            }
        }

        public void printAll() {
            for (String s : list) {
                System.out.println(s);
            }
        }

        public Map<String, List<Integer>> createRevertedIndexMap(String... args) throws IOException {
            Map<String, List<Integer>> map = new TreeMap<>();

            try (BufferedReader reader = Files.newBufferedReader(Paths.get(args[1]))) {
                int counter = 0;
                while (reader.ready()) {
                    String line = reader.readLine();
                    list.add(line);
                    line = line.toLowerCase();
                    int wordsCount = line.split(" ").length;
                    switch (wordsCount) {
                        case 1:
                            mapOneWordLine(map, counter, line);
                            break;
                        case 2:
                            mapTwoWordLine(map, counter, line);
                            break;
                        case 3:
                            mapThreeWordLine(map, counter, line);
                    }
                    counter++;
                }
            }
            return map;
        }

        private void mapOneWordLine(Map<String, List<Integer>> map, int counter, String line) {
            if (map.containsKey(line)) {
                map.get(line).add(counter);
            } else {
                map.put(line, new CopyOnWriteArrayList<>(Collections.singleton(counter)));
            }
        }

        private void mapTwoWordLine(Map<String, List<Integer>> map, int counter, String line) {
            mapFirstTwoLines(map, counter, line);
        }

        private void mapThreeWordLine(Map<String, List<Integer>> map, int counter, String line) {
            mapFirstTwoLines(map, counter, line);
            if (map.containsKey(line.split(" ")[2])) {
                map.get(line.split(" ")[2]).add(counter);
            } else {
                map.put(line.split(" ")[2], new CopyOnWriteArrayList<>(Collections.singleton(counter)));
            }
        }

        private void mapFirstTwoLines(Map<String, List<Integer>> map, int counter, String line) {
            if (map.containsKey(line.split(" ")[0])) {
                map.get(line.split(" ")[0]).add(counter);
            } else {
                map.put(line.split(" ")[0], new CopyOnWriteArrayList<>(Collections.singleton(counter)));
            }
            if (map.containsKey(line.split(" ")[1])) {
                map.get(line.split(" ")[1]).add(counter);
            } else {
                map.put(line.split(" ")[1], new CopyOnWriteArrayList<>(Collections.singleton(counter)));
            }
        }
    }
  learner_created: true
- name: src/search/Menu.java
  visible: true
  text: |
    package search;

    public class Menu {

        /**
         * Created by ipodovinnikov (podovinnii@ae.com) on 4/1/22.
         */
        public void show() {
            System.out.println(
                    "\nc=== Menu ===\n" +
                    "1. Find a person\n" +
                    "2. Print all people\n" +
                    "0. Exit");
        }
    }
  learner_created: true
- name: src/search/Helper.java
  visible: true
  text: |
    package search;

    import java.io.BufferedReader;
    import java.io.BufferedWriter;
    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.*;
    import java.util.concurrent.CopyOnWriteArrayList;

    public class Helper {

        /**
         * Created by ipodovinnikov (podovinnii@ae.com) on 4/1/22.
         */

        public List<Person> gatherData(String... args) throws IOException {
            List<Person> personList = new ArrayList<>();
            try (BufferedReader reader = Files.newBufferedReader(Paths.get(args[1]))) {
                while (reader.ready()) {
                    String line = reader.readLine();
                    String name = "";
                    String email = "";
                    if (line.split(" ").length > 2) {
                        name = line.split(" ")[0] + " " + line.split(" ")[1];
                        email = line.split(" ")[2];
                    } else if (line.split(" ").length == 2) {
                        name = line.split(" ")[0];
                        email = line.split(" ")[1];
                    } else if (line.split(" ").length < 2) {
                        name = line.split(" ")[0];
                    }
                    personList.add(new Person(name, email));
                }
            }
            return personList;
        }

        public static class Reader {
            public static String read() {
                return new Scanner(System.in).nextLine();
            }
        }
    }
  learner_created: true
- name: src/search/Strategy.java
  visible: true
  learner_created: true
- name: test/CustomTests.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/66/stages/359/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 02 Apr 2022 13:45:50 UTC
record: 6
